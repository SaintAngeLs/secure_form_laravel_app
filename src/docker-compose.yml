version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    container_name: secure_form_app
    restart: unless-stopped
    volumes:
      - .:/var/www/html
    networks:
      - app-network
    depends_on:
      - db
      - redis
      - kafka
    env_file:
      - ./docker/.env.docker
    command: ["sh", "/var/www/html/docker/entrypoint.sh"]

  nginx:
    image: nginx:stable
    container_name: secure_form_nginx
    volumes:
      - .:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 9090:9090
    networks:
      - app-network
    depends_on:
      - app

  db:
    image: postgres:15
    container_name: secure_form_postgres
    restart: unless-stopped
    environment:
        POSTGRES_DB: secure_form_laravel
        POSTGRES_USER: secure_form_laravel_user
        POSTGRES_PASSWORD: secure_form_laravel_user_password
    volumes:
        - postgres_data:/var/lib/postgresql/data
        - ./docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
        - app-network


  pgadmin:
    image: dpage/pgadmin4
    container_name: secure_form_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    #   PGADMIN_CONFIG_SERVER_MODE: "False"
    #   PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    ports:
      - "5050:80"
    depends_on:
      - db
    # entrypoint: /bin/sh -c "chmod 600 /pgpass;"
    volumes:
      - ./docker/pgAdmin/pgpass:/.pgpass
      - ./docker/pgAdmin/servers.json:/pgadmin4/servers.json
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: secure_form_redis
    restart: unless-stopped
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: secure_form_kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - app-network

  kafka-consumer:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    container_name: kafka_consumer
    command: ["php", "artisan", "app:start-file-cleanup-listener"]
    depends_on:
      - kafka
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: secure_form_zookeeper
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - app-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: secure_form_kafka_ui
    restart: unless-stopped
    ports:
      - 8081:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: secure_form_cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: secure_form_elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - 9200:9200
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: secure_form_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://secure_form_elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9
    container_name: secure_form_logstash
    volumes:
      - ./src/docker/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/app
    ports:
      - 5044:5044
    depends_on:
      - elasticsearch
    networks:
      - app-network

  portainer:
    image: portainer/portainer-ce:latest
    container_name: secure_form_portainer
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - 9000:9000
    networks:
      - app-network

volumes:
  postgres_data:
  portainer_data:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.123.0/24
